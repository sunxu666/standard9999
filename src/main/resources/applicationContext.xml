<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--1扫描指定包中的中的注解，识别Spring中的Bean-->
    <context:component-scan base-package="com.ssm.standard"></context:component-scan>

    <!--2引入Properties文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--3配置数据源-->
    <bean id="dataSource" class="${dateSourceClass}"
          p:driverClassName="${mysql.driverClassName}"
          p:url="${mysql.url}"
          p:username="${mysql.username}"
          p:password="${mysql.password}"
          p:initialSize="${initialSize}"
          p:maxIdle="${maxIdle}"
          p:maxWaitMillis="${maxWaitMillis}"></bean>



    <!--使用Spring整合Mybatis（Spring来创建管理Mybatis中的对象）
        1)可以直接不使用Mybatis的配置文件，将相关的配置信息直接配置在当前的bean中
        2)也可以使用configLocation属性，将原始的Mybatis配置文件直接导入当前的bean
    -->
    <!--4根据数据源工厂查找-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--注入映射文件,自动将java源代码目录下的mapper文件夹下的所有xml文件都声明成映射文件-->
        <property name="mapperLocations" value="classpath:com/ssm/standard/dao/*.xml"/>
        <!--这边的包别名都是在mapper中使用的-->

        <property name="typeAliasesPackage" value="com.ssm.phoneInfo.entity"/>
    </bean>

    <!--5自动扫描所有的mapper接口，创建代理类
        自动将所有的mapper文件映射为Spring的bean对象
        id是首字母小写形式的类型名
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--使用sqlSessionFactory的beanName注入-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定所有接口文件所有的包-->
        <property name="basePackage" value="com.ssm.standard.dao"/>
    </bean>

    <!--6声明式事务处理-->
    <!--事务管理类-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--不同方法的事务处理策略-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!---->
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" propagation="NEVER"/>
            <tx:method name="set*" propagation="NEVER"/>
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" />
        </tx:attributes>
    </tx:advice>
    <!--7aop配置事务切面-->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.ssm.standard.service.impl.*.*(..))"/>
        <!-- 事务使用默认前置增强处理 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
</beans>